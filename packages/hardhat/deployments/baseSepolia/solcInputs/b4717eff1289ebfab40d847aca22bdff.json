{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/VoiceRemittance.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title VoiceRemittance\n * @dev Smart contract for voice-powered crypto remittances using ENS names\n * @author VoicePay Africa Team\n * \n * Core Features:\n * - Voice-initiated payments using ENS names\n * - IPFS storage of voice receipts via Web3.Storage\n * - Multi-currency support (ETH, USDC on Base)\n * - Reputation tracking for EFP integration\n * - Secure escrow mechanism\n */\ncontract VoiceRemittance is ReentrancyGuard, Pausable, Ownable {\n    uint256 private _orderCounter;\n    \n    // Structs\n    struct PaymentOrder {\n        uint256 id;\n        address sender;\n        string recipientENS;\n        address recipientAddress;\n        uint256 amount;\n        string voiceReceiptHash; // IPFS hash of voice recording\n        uint256 timestamp;\n        bool completed;\n        string currency; // \"ETH\", \"USDC\", etc.\n        uint8 status; // 0: pending, 1: completed, 2: cancelled, 3: disputed\n        string metadata; // Additional payment metadata\n    }\n    \n    struct UserProfile {\n        uint256 totalSent;\n        uint256 totalReceived;\n        uint256 transactionCount;\n        uint256 reputationScore; // For EFP integration\n        bool isVerified;\n        string ensName;\n        uint256 lastActivity;\n    }\n    \n    // Storage\n    mapping(uint256 => PaymentOrder) public orders;\n    mapping(address => UserProfile) public userProfiles;\n    mapping(string => address) public ensToAddress; // ENS name -> address cache\n    mapping(address => string) public addressToENS; // Reverse ENS cache\n    mapping(address => uint256[]) public userOrders; // User's payment orders\n    \n    // Constants and Configuration\n    uint256 public constant MAX_PAYMENT_AMOUNT = 1000 ether; // Safety limit\n    uint256 public constant MIN_PAYMENT_AMOUNT = 0.001 ether;\n    uint256 public platformFeePercent = 50; // 0.5% (50/10000)\n    uint256 public constant MAX_FEE_PERCENT = 300; // 3% maximum\n    \n    // Events\n    event PaymentInitiated(\n        uint256 indexed orderId, \n        address indexed sender, \n        string recipientENS, \n        uint256 amount,\n        string currency,\n        string voiceHash\n    );\n    \n    event PaymentCompleted(\n        uint256 indexed orderId, \n        address indexed recipient, \n        uint256 amount,\n        uint256 fee\n    );\n    \n    event PaymentCancelled(\n        uint256 indexed orderId,\n        address indexed sender,\n        string reason\n    );\n    \n    event ENSAddressUpdated(\n        string indexed ensName,\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n    \n    event VoiceReceiptStored(\n        uint256 indexed orderId,\n        string voiceHash,\n        uint256 timestamp\n    );\n    \n    event ReputationUpdated(\n        address indexed user,\n        uint256 oldScore,\n        uint256 newScore\n    );\n    \n    // Modifiers\n    modifier validPaymentAmount(uint256 _amount) {\n        require(_amount >= MIN_PAYMENT_AMOUNT, \"Payment amount too small\");\n        require(_amount <= MAX_PAYMENT_AMOUNT, \"Payment amount too large\");\n        _;\n    }\n    \n    modifier orderExists(uint256 _orderId) {\n        require(_orderId > 0 && _orderId <= _orderCounter, \"Order does not exist\");\n        _;\n    }\n    \n    modifier onlySender(uint256 _orderId) {\n        require(orders[_orderId].sender == msg.sender, \"Not the order sender\");\n        _;\n    }\n    \n    constructor() Ownable(msg.sender) {\n        // Constructor initializes with deployer as owner\n    }\n    \n    /**\n     * @dev Initiate a voice payment using ENS name\n     * @param _recipientENS The ENS name of the recipient\n     * @param _voiceHash IPFS hash of the voice recording\n     * @param _currency Currency type (\"ETH\", \"USDC\", etc.)\n     * @param _metadata Additional payment metadata\n     */\n    function initiatePayment(\n        string memory _recipientENS,\n        string memory _voiceHash,\n        string memory _currency,\n        string memory _metadata\n    ) external payable nonReentrant whenNotPaused validPaymentAmount(msg.value) {\n        require(bytes(_recipientENS).length > 0, \"ENS name cannot be empty\");\n        require(bytes(_voiceHash).length > 0, \"Voice hash cannot be empty\");\n        require(msg.value > 0, \"Payment amount must be greater than 0\");\n        \n        _orderCounter++;\n        uint256 orderId = _orderCounter;\n        \n        // Create payment order\n        orders[orderId] = PaymentOrder({\n            id: orderId,\n            sender: msg.sender,\n            recipientENS: _recipientENS,\n            recipientAddress: address(0), // Will be resolved later\n            amount: msg.value,\n            voiceReceiptHash: _voiceHash,\n            timestamp: block.timestamp,\n            completed: false,\n            currency: _currency,\n            status: 0, // pending\n            metadata: _metadata\n        });\n        \n        // Add order to user's list\n        userOrders[msg.sender].push(orderId);\n        \n        // Update user profile\n        _updateUserProfile(msg.sender, msg.value, 0, true);\n        \n        emit PaymentInitiated(orderId, msg.sender, _recipientENS, msg.value, _currency, _voiceHash);\n        emit VoiceReceiptStored(orderId, _voiceHash, block.timestamp);\n    }\n    \n    /**\n     * @dev Complete payment by resolving ENS and transferring funds\n     * @param _orderId The order ID to complete\n     * @param _recipientAddress The resolved address of the ENS name\n     */\n    function completePayment(\n        uint256 _orderId,\n        address _recipientAddress\n    ) external nonReentrant whenNotPaused orderExists(_orderId) {\n        PaymentOrder storage order = orders[_orderId];\n        require(!order.completed, \"Order already completed\");\n        require(order.status == 0, \"Order is not in pending status\");\n        require(_recipientAddress != address(0), \"Invalid recipient address\");\n        require(_recipientAddress != order.sender, \"Cannot send to yourself\");\n        \n        // Verify ENS resolution (this would typically be done by an oracle or resolver)\n        // For MVP, we accept the provided address\n        order.recipientAddress = _recipientAddress;\n        order.completed = true;\n        order.status = 1; // completed\n        \n        // Calculate platform fee\n        uint256 fee = (order.amount * platformFeePercent) / 10000;\n        uint256 netAmount = order.amount - fee;\n        \n        // Update ENS cache\n        _updateENSCache(order.recipientENS, _recipientAddress);\n        \n        // Update recipient profile\n        _updateUserProfile(_recipientAddress, 0, netAmount, false);\n        \n        // Transfer funds\n        (bool success, ) = _recipientAddress.call{value: netAmount}(\"\");\n        require(success, \"Transfer to recipient failed\");\n        \n        // Transfer fee to platform (contract owner)\n        if (fee > 0) {\n            (bool feeSuccess, ) = owner().call{value: fee}(\"\");\n            require(feeSuccess, \"Fee transfer failed\");\n        }\n        \n        // Update reputation scores\n        _updateReputation(order.sender, 10); // Sender gets reputation for sending\n        _updateReputation(_recipientAddress, 5); // Recipient gets smaller reputation boost\n        \n        emit PaymentCompleted(_orderId, _recipientAddress, netAmount, fee);\n    }\n    \n    /**\n     * @dev Cancel a pending payment order\n     * @param _orderId The order ID to cancel\n     * @param _reason Reason for cancellation\n     */\n    function cancelPayment(\n        uint256 _orderId,\n        string memory _reason\n    ) external nonReentrant orderExists(_orderId) onlySender(_orderId) {\n        PaymentOrder storage order = orders[_orderId];\n        require(!order.completed, \"Cannot cancel completed order\");\n        require(order.status == 0, \"Order is not in pending status\");\n        \n        order.status = 2; // cancelled\n        \n        // Refund the sender\n        (bool success, ) = order.sender.call{value: order.amount}(\"\");\n        require(success, \"Refund failed\");\n        \n        emit PaymentCancelled(_orderId, order.sender, _reason);\n    }\n    \n    /**\n     * @dev Update ENS address cache\n     * @param _ensName ENS domain name\n     * @param _address Resolved address\n     */\n    function _updateENSCache(string memory _ensName, address _address) private {\n        address oldAddress = ensToAddress[_ensName];\n        ensToAddress[_ensName] = _address;\n        addressToENS[_address] = _ensName;\n        \n        if (oldAddress != _address) {\n            emit ENSAddressUpdated(_ensName, oldAddress, _address);\n        }\n    }\n    \n    /**\n     * @dev Update user profile statistics\n     * @param _user User address\n     * @param _sentAmount Amount sent (0 if not applicable)\n     * @param _receivedAmount Amount received (0 if not applicable)\n     * @param _isSender Whether this is a sender transaction\n     */\n    function _updateUserProfile(\n        address _user,\n        uint256 _sentAmount,\n        uint256 _receivedAmount,\n        bool _isSender\n    ) private {\n        UserProfile storage profile = userProfiles[_user];\n        \n        if (_isSender) {\n            profile.totalSent += _sentAmount;\n        } else {\n            profile.totalReceived += _receivedAmount;\n        }\n        \n        profile.transactionCount++;\n        profile.lastActivity = block.timestamp;\n        \n        // Auto-verify users after 5 successful transactions\n        if (profile.transactionCount >= 5 && !profile.isVerified) {\n            profile.isVerified = true;\n        }\n    }\n    \n    /**\n     * @dev Update user reputation score\n     * @param _user User address\n     * @param _points Reputation points to add\n     */\n    function _updateReputation(address _user, uint256 _points) private {\n        UserProfile storage profile = userProfiles[_user];\n        uint256 oldScore = profile.reputationScore;\n        profile.reputationScore += _points;\n        \n        emit ReputationUpdated(_user, oldScore, profile.reputationScore);\n    }\n    \n    // View Functions\n    \n    /**\n     * @dev Get payment order details\n     * @param _orderId The order ID to query\n     */\n    function getOrder(uint256 _orderId) external view orderExists(_orderId) returns (PaymentOrder memory) {\n        return orders[_orderId];\n    }\n    \n    /**\n     * @dev Get user profile\n     * @param _user User address to query\n     */\n    function getUserProfile(address _user) external view returns (UserProfile memory) {\n        return userProfiles[_user];\n    }\n    \n    /**\n     * @dev Get user's payment order IDs\n     * @param _user User address to query\n     */\n    function getUserOrders(address _user) external view returns (uint256[] memory) {\n        return userOrders[_user];\n    }\n    \n    /**\n     * @dev Get total number of orders\n     */\n    function getTotalOrders() external view returns (uint256) {\n        return _orderCounter;\n    }\n    \n    /**\n     * @dev Resolve ENS name to address (cached)\n     * @param _ensName ENS domain name\n     */\n    function resolveENS(string memory _ensName) external view returns (address) {\n        return ensToAddress[_ensName];\n    }\n    \n    /**\n     * @dev Get ENS name from address (reverse lookup)\n     * @param _address Address to query\n     */\n    function reverseResolveENS(address _address) external view returns (string memory) {\n        return addressToENS[_address];\n    }\n    \n    // Admin Functions\n    \n    /**\n     * @dev Update platform fee (only owner)\n     * @param _newFeePercent New fee percentage (in basis points)\n     */\n    function updatePlatformFee(uint256 _newFeePercent) external onlyOwner {\n        require(_newFeePercent <= MAX_FEE_PERCENT, \"Fee too high\");\n        platformFeePercent = _newFeePercent;\n    }\n    \n    /**\n     * @dev Pause contract (emergency use)\n     */\n    function pause() external onlyOwner {\n        _pause();\n    }\n    \n    /**\n     * @dev Unpause contract\n     */\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n    \n    /**\n     * @dev Emergency withdrawal (only owner, when paused)\n     */\n    function emergencyWithdraw() external onlyOwner whenPaused {\n        (bool success, ) = owner().call{value: address(this).balance}(\"\");\n        require(success, \"Emergency withdrawal failed\");\n    }\n    \n    /**\n     * @dev Update user verification status (for KYC/AML compliance)\n     * @param _user User address\n     * @param _verified Verification status\n     */\n    function updateUserVerification(address _user, bool _verified) external onlyOwner {\n        userProfiles[_user].isVerified = _verified;\n    }\n    \n    /**\n     * @dev Manually update ENS cache (for testing/admin purposes)\n     * @param _ensName ENS domain name\n     * @param _address Resolved address\n     */\n    function updateENSCache(string memory _ensName, address _address) external onlyOwner {\n        _updateENSCache(_ensName, _address);\n    }\n    \n    // Fallback and Receive\n    receive() external payable {\n        // Accept ETH deposits\n    }\n    \n    fallback() external payable {\n        // Accept ETH deposits\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}